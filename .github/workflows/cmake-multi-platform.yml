# This workflow builds and tests a CMake project on multiple platforms.
# It also runs additional tests to check the binary's formatted output and perform a code formatting check.
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test (ctest)
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Application and Compare Output (Linux)
        if: runner.os == 'Linux'
        run: |
          # Run the application with a set of known parameters and capture output
          ./build/sum_experiment --threads 1 --size 1000000 --method reduce --runs 1 --warmup 0 --dist rand > output.txt
          echo "Output from sum_experiment (Linux):"
          cat output.txt
          # Check for a specific known substring in the output (adjust as needed)
          grep "Array of size" output.txt

      - name: Run Application and Compare Output (Windows)
        if: runner.os == 'Windows'
        run: |
          build\sum_experiment.exe --threads 1 --size 1000000 --method reduce --runs 1 --warmup 0 --dist rand > output.txt
          echo "Output from sum_experiment (Windows):"
          type output.txt
          findstr "Array of size" output.txt

      - name: Check Code Formatting (Linux only)
        if: runner.os == 'Linux'
        run: |
          # Run clang-format on all .cpp and .h files and ensure there are no differences.
          # Adjust the file patterns or directory paths as needed.
          set -e
          FILES=$(find . -type f \( -name "*.cpp" -o -name "*.h" \) )
          for file in $FILES; do
            clang-format -style=file "$file" | diff -u "$file" -
          done
