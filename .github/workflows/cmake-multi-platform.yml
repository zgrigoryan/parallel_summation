# This workflow builds and tests a CMake project on multiple platforms.
# It also runs additional tests to check the binary's formatted output and perform a code formatting check.
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
    
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test (ctest)
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}
        
      - name: Run Executable
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running benchmark tests..."
  
          executable_name="sum_experiment"
  
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            executable_name="sum_experiment.exe"
            executable_path="Release/$executable_name"  # Windows binary is in Release/
          else
            executable_path="./$executable_name"  # Linux/macOS binary
          fi
  
          # Check if the executable exists before running
          echo "Checking if executable exists: $executable_path"
          if [ -f "$executable_path" ]; then
            echo "Executable found, running it..."
            "$executable_path" --threads 1 --size 1000000 --method reduce --runs 1 --warmup 0 --dist rand
          else
            echo "Error: Executable not found at $executable_path"
            exit 1
          fi
